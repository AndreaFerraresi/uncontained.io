apiVersion: v1
kind: Template
metadata:
  name: pipeline-template
  labels:
    template-type: build
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      build: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ${OUTPUT_IMAGE_TYPE}
        name: ${OUTPUT_IMAGE}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      binary: {}
      type: Binary
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nginx:latest
          namespace: openshift
      type: Source
    successfulBuildsHistoryLimit: 5
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChange: {}
  status:
    lastVersion: 0
- kind: "BuildConfig"
  apiVersion: "v1"
  metadata:
    name: ${APP_NAME}-pipeline
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          library identifier: "pipeline-library@master", retriever: modernSCM(
          [$class: "GitSCMSource",
          remote: "https://github.com/redhat-cop/pipeline-library.git"])


          openshift.withCluster() {
            env.NAMESPACE = openshift.project()
            env.APP_NAME = "${env.JOB_NAME}".replaceAll(/-?pipeline-?/, '').replaceAll(/-?${env.NAMESPACE}-?\/?/, '')

            env.localToken = readFile('/var/run/secrets/kubernetes.io/serviceaccount/token').trim()

            def secretData = openshift.selector('secret/other-cluster-credentials').object().data
            def encodedRegistry = secretData.registry
            def encodedToken = secretData.token
            def encodedAPI = secretData.api
            env.registry = sh(script:"set +x; echo ${encodedRegistry} | base64 --decode", returnStdout: true)
            env.token = sh(script:"set +x; echo ${encodedToken} | base64 --decode", returnStdout: true)
            env.api = sh(script:"set +x; echo ${encodedAPI} | base64 --decode", returnStdout: true)
          }

          //n.notifyBuild('STARTED', rocketchat_url)

          pipeline {
            agent {
              label 'hugo-builder'
            }

            stages {
              stage ('Fetch Source Code') {
                steps {
                  hygieiaBuildPublishStep buildStatus: 'InProgress'
                  git url: "${APPLICATION_SOURCE_REPO}", branch: "${APPLICATION_SOURCE_REF}"
                 
                  env.groupVars = readYaml file: '.applier/inventory/group_vars/all.yml'
                  env.ci_cd_namespace = """${groupVars.ci_cd_namespace}"""
                  env.dev_namespace = """${groupVars.dev_namespace}"""
                  env.test_namespace = """${groupVars.test_namespace}"""
                  env.stage_namespace = """${groupVars.stage_namespace}"""
                  //env.prod_namespace = """${groupVars.prod_namespace}"""
 
                }
              }

              stage ('Build Site from Source') {
                steps {
                  container('builder') {
                    sh 'npm install'
                    sh 'npm run build'
                  }
                }
                post {
                  failure {
                    hygieiaBuildPublishStep buildStatus: 'Failure'
                  }
                  aborted {
                    hygieiaBuildPublishStep buildStatus: 'Aborted'
                  }
                  success {
                    hygieiaBuildPublishStep buildStatus: 'Success'
                  }
                }
              }

              /*
              stage ('Run Automated Tests') {
                steps {
                  container('builder') {
                    sh 'npm test'
                  }
                }
              }*/

              stage ('Build Container Image') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject() {
                        openshift.selector("bc", "${APP_NAME}").startBuild("--from-dir=dist").logs("-f")
                      }
                    }
                  }
                }
              }

              stage ('Deploy to Dev'){
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject() {
                        echo "Promoting via tag from ${NAMESPACE} to ${dev_namespace}/${APP_NAME}"
                        tagImage(sourceImagePath: "${NAMESPACE}", sourceImageName: "${APP_NAME}", toImagePath: "${dev_namespace}", toImageName: "${APP_NAME}", toImageTag: "latest")
                      }
                    }
                    sh 'mkdir dist/'
                    sh 'touch dist/index.html'
                    hygieiaDeployPublishStep applicationName: 'uncontained', artifactDirectory: 'dist/', artifactGroup: 'uncontained.io', artifactName: 'index.html', artifactVersion: '${BUILD_NUMBER}-test', buildStatus: 'Success', environmentName: 'test'
                  }
                }
              }

              stage ('Verify Deployment to Dev') {
                steps {
                  script {
                    openshift.withCluster() {
                      def dcObj = openshift.selector('dc', APP_NAME).object()
                      def podSelector = openshift.selector('pod', [deployment: "${APP_NAME}-${dcObj.status.latestVersion}"])
                      podSelector.untilEach {
                          echo "pod: ${it.name()}"
                          return it.object().status.containerStatuses[0].ready
                      }
                    }
                  }
                }
                post {
                  success {
                    hygieiaDeployPublishStep applicationName: 'uncontained', artifactDirectory: 'dist/', artifactGroup: 'uncontained.io', artifactName: 'index.html', artifactVersion: '${BUILD_NUMBER}-${dev_namespace}', buildStatus: 'Success', environmentName: '${dev_namespace}'
                  }
                }
              }

              stage('Promote to ${test_namespace}') {
                agent {
                  kubernetes {
                    label 'promotion-slave'
                    cloud 'openshift'
                    serviceAccount 'jenkins'
                    containerTemplate {
                      name 'jnlp'
                      image "docker-registry.default.svc:5000/${NAMESPACE}/jenkins-slave-image-mgmt"
                      alwaysPullImage true
                      workingDir '/tmp'
                      args '${computer.jnlpmac} ${computer.name}'
                      ttyEnabled false
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject() {
                        echo "Promoting via tag from ${NAMESPACE} to ${test_namespace}/${APP_NAME}"
                        tagImage(sourceImagePath: "${NAMESPACE}", sourceImageName: "${APP_NAME}", toImagePath: "${test_namespace}", toImageName: "${APP_NAME}", toImageTag: "latest")
                      }
                    }
                    sh 'mkdir dist/'
                    sh 'touch dist/index.html'
                    hygieiaDeployPublishStep applicationName: 'uncontained', artifactDirectory: 'dist/', artifactGroup: 'uncontained.io', artifactName: 'index.html', artifactVersion: '${BUILD_NUMBER}-${test_namespace}', buildStatus: 'Success', environmentName: '${test_namespace}'
                  }
                }
              }

              stage('Promote to ${stage_namespace}') {
                agent {
                  kubernetes {
                    label 'promotion-slave'
                    cloud 'openshift'
                    serviceAccount 'jenkins'
                    containerTemplate {
                      name 'jnlp'
                      image "docker-registry.default.svc:5000/${NAMESPACE}/jenkins-slave-image-mgmt"
                      alwaysPullImage true
                      workingDir '/tmp'
                      args '${computer.jnlpmac} ${computer.name}'
                      ttyEnabled false
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject() {
                        echo "Promoting via tag from ${NAMESPACE} to ${stage_namespace}/${APP_NAME}"
                        tagImage(sourceImagePath: "${NAMESPACE}", sourceImageName: "${APP_NAME}", toImagePath: "${stage_namespace}", toImageName: "${APP_NAME}", toImageTag: "latest")
                      }
                    }
                    sh 'mkdir dist/'
                    sh 'touch dist/index.html'
                    hygieiaDeployPublishStep applicationName: 'uncontained', artifactDirectory: 'dist/', artifactGroup: 'uncontained.io', artifactName: 'index.html', artifactVersion: '${BUILD_NUMBER}-${stage_namespace}', buildStatus: 'Success', environmentName: '${stage_namespace}'
                  }
                }
              }
            }

            /*
            post {
              success {
                script {

                  //n.notifyBuild('SUCCESSFUL', rocketchat_url)
                }
              }
              failure {
                script {
                  //n.notifyBuild('FAILED', rocketchat_url)
                }
              }
            }*/

          }
        env:
          - name: APPLICATION_SOURCE_REPO
            value: ${APPLICATION_SOURCE_REPO}
          - name: APPLICATION_SOURCE_REF
            value: ${APPLICATION_SOURCE_REF}
    triggers:
      - type: ConfigChange
      - type: GitHub
        github:
          secret: d8g73hc87
parameters:
- name: APP_NAME
- name: OUTPUT_IMAGE
- name: OUTPUT_IMAGE_TYPE
- name: PUSH_SECRET
- name: APPLICATION_SOURCE_REPO
  value: https://github.com/redhat-cop/uncontained.io
- name: APPLICATION_SOURCE_REF
  value: master
